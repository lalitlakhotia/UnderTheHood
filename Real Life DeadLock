A deadlock is a situation where minimum two threads are holding lock on some different resource, and both are waiting for
otherâ€™s resource to complete its task. And, none is able to leave the lock on resource it is holding. 

package ProducerConsumerProblem;


public class ThreadDeadlock {
 
    public static void main(String[] args) throws InterruptedException {
        Object resources1 = new Object();
        Object resources2 = new Object();
        Object resources3 = new Object();
     
        Thread t1 = new Thread(new SyncThread(resources1, resources2), "t1");
        Thread t2 = new Thread(new SyncThread(resources2, resources3), "t2");
        Thread t3 = new Thread(new SyncThread(resources3, resources1), "t3");
         
        t1.start();
        Thread.sleep(5000);
        t2.start();
        Thread.sleep(5000);
        t3.start();
         
    }
 
}
 
class SyncThread implements Runnable{
    private Object obj1;
    private Object obj2;
 
    public SyncThread(Object o1, Object o2){
        this.obj1=o1;
        this.obj2=o2;
    }
    @Override
    public void run() {
        String name = Thread.currentThread().getName();
        System.out.println(name + " acquiring lock on " + obj1);
        synchronized (obj1) {
            System.out.println(name + " acquired lock on " + obj1);
            work();
        }
        System.out.println(name + " released lock on " + obj1);
        System.out.println(name + " acquiring lock on " + obj2);
        synchronized (obj2) {
            System.out.println(name + " acquired lock on " + obj2);
            work();
        }
        System.out.println(name + " released lock on " + obj2);
     
        System.out.println(name + " finished execution.");
    }
    //UnCommenting will Cause Deadloack
    /*public void run() {
        String name = Thread.currentThread().getName();
        System.out.println(name + " acquiring lock on "+obj1);
        synchronized (obj1) {
         System.out.println(name + " acquired lock on "+obj1);
         work();
         System.out.println(name + " acquiring lock on "+obj2);
         synchronized (obj2) {
            System.out.println(name + " acquired lock on "+obj2);
            work();
        }
         System.out.println(name + " released lock on "+obj2);
        }
        System.out.println(name + " released lock on "+obj1);
        System.out.println(name + " finished execution.");
    } */
    private void work() {
        try {
            Thread.sleep(30000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
